import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class Step2_FillterCombineAction {public static class Step_Map extends Mapper<LongWritable,Text,Text,Text>{
    public static Map joinData=new TreeMap();
    protected void setup(Context context) throws IOException, InterruptedException {
        
        BufferedReader reader=new BufferedReader(new FileReader("C:\\Users\\Administrator\\Desktop\\Project\\项目资料\\数据\\配置数据\\t_dx_basic_msg_addr.txt"));
        String str="";
        while ((str=reader.readLine())!=null){
           // System.out.println(str);
            String[] data=str.split("\\|");
            //行为ID
            String actionId=data[0];
            //一级域名
            String url1=data[1];
            //二级或者三级域名
            String url2_3=data[2];
            //是否购买产品
            String tfProduction=data[4];
            //购买类型
            String typeBy=data[5];
            joinData.put(url2_3+"|"+url1,actionId+"|"+tfProduction+"|"+url1+"|"+typeBy);

        }


    }

    @Override
    protected void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
        String[] line= value.toString().split("\\|");
        String url=line[2];
        String userId=line[0];
        Set joinData_key=joinData.keySet();
        for (Object s :joinData_key) {
            System.out.println(s);
            String url2_3=s.toString().split("\\|")[0];
            String url1=s.toString().split("\\|")[1];
            if (url.contains(url2_3)){
                String[] joinData_value=s.toString().split("\\|");
                context.write(new Text(userId+"|"+joinData_value[0]+"|"+joinData_value[1]+"|"+url+"|"+joinData_value[3]),new Text(""));

            }else if (url.contains(url1)){
                String[] joinData_value=s.toString().split("\\|");
                context.write(new Text(userId+"|"+joinData_value[0]+"|"+joinData_value[1]+"|"+url+"|"+joinData_value[3]),new Text(""));

            }else {
                break;
            }


        }

    }
}

public static void main(String[] args) throws IOException, URISyntaxException {
    Configuration conf=new Configuration();
    conf.set("fs.default.name","hdfs://192.168.44.22:9000");
   // String[] otherArgs=new GenericOptionsParser(conf,args).getRemainingArgs();
    Job job= Job.getInstance(conf);
    job.setJarByClass(Step2_FillterCombineAction.class);
    job.setMapperClass(Step_Map.class);
    job.setOutputKeyClass(Text.class);
    job.setOutputValueClass(Text.class);
    job.addCacheFile(new URI("file:/c:/input"));
    FileInputFormat.setInputPaths(job,new Path("file:\\C:\\Users\\Administrator\\Desktop\\step1"));
    FileOutputFormat.setOutputPath(job,new Path("file:/E:/output/two5/"));
    try {
        job.waitForCompletion(true);
    } catch (InterruptedException e) {
        e.printStackTrace();
    } catch (ClassNotFoundException e) {
        e.printStackTrace();
    }
}
	

}
